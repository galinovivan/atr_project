!function(t){t(document).ready(function(){t("#centerSlider").slick({centerPadding:"0px",centerMode:!0,slidesToShow:5,prevArrow:'<div class="arrow left"><i class="social_arrow social_arrow-arrow_left"></i></div>',nextArrow:'<div class="arrow right"><i class="social_arrow social_arrow-arrow_right"></i></div>'})})}(jQuery),function(t){t(document).ready(function(){t("#contactForm").submit(function(e){e.preventDefault();var o=t(this).serialize();o.action;t.ajax({type:"POST",url:window.wp_data.ajax_url,data:o,success:function(){t("#contactModal").modal("show")}})})})}(jQuery),function(t){t(document).ready(function(){var e=document.documentElement.lang;if("ru-RU"==e)var o="E-mail",n="Пароль",i="Повторите пароль";else if("en-US"==e){var o="E-mail",n="Password",i="Repeat password";t("#pass1").attr("placeholder",n),t("#last_name").attr("placeholder","Name")}var r=t("#wpuf-user_login"),a=t("#wpuf-user_pass"),s=t("#pass2");if(r.attr("placeholder",o),a.attr("placeholder",n),s.attr("placeholder",i),"ru-RU"==e)var c="Загрузить превью в jpg",l="Загрузить работу в pdf";else if("en-US"==e)var c="Upload the preview in .jpg",l="Upload the project in .pdf";var u=t("#wpuf-___________________pdf-pickfiles"),d=t("#post-68 > div > form > ul > li.wpuf-submit"),p='<span>Нажимая на кнопку отправить, я подтверждаю свою дееспособность и даю <a href="http://arhproekt.pro/wp-content/themes/atr_project/assets/docs/subscrible.docx">согласие</a> на обработку персональных данных.</span>',f='<span>Нажимая на кнопку регистрация, я подтверждаю свою дееспособность и даю <a href="http://arhproekt.pro/wp-content/themes/atr_project/assets/docs/subscrible.docx">согласие</a> на обработку персональных данных.</span>',m=t("#registrationModal > div > div > div.modal-body > div.registration.auth_form > div.reg_form > form > ul > li.wpuf-submit");"en-US"==e&&(f='<span>Pressing JOIN one confirms their capacity and <a href="http://arhproekt.pro/wp-content/themes/atr_project/assets/docs/subscrible.docx">agrees</a> to handling of their personal data.</span>',p='<p>Pressing SEND one confirms their capacity and <a href="http://arhproekt.pro/wp-content/themes/atr_project/assets/docs/subscrible.docx">agrees</a> to handling of their personal data.</p>'),m.prepend(f),d.prepend(p),u.text(l),t("#wpuf-featured_image-pickfiles").text(c)});var e=t(".wpuf_category_select_353_352 select"),o=document.documentElement.lang;if("ru-RU"==o)var n="Категория";else if("en-US"==o)var n="Type of participant";e=e.children(":first"),e.text(n)}(jQuery),function(t){t(document).ready(function(){currentLang=document.documentElement.lang;var e={};e.finalist="Finalists 2016",e.students="Students",e.graduate="Graduates",e.single="Single",e.multiple="Group",e.interior="Interior of apartment",e.pavilon="Pavilion / arbor",e.busStation="Bus station",e.cityOnTheWater="Floating city",e.nomination="Category",e.numbersOfPartners="Number of partners";var o={};if(o.name="Full name",o.city="Region/State",o.phoneNumber="Phone Number",o.univer="Institution",o.spec="Specialty",o.Year="Year of graduation",o.teamLead="Mentor",o.projectName="Project Name",o.projectDesc="Project description",o.submit="Send proect","en-US"==currentLang){t(".wpuf_category_select_353_352 option:nth-of-type(2)").text(e.finalist),t(".wpuf_category_select_353_352 option:nth-of-type(3)").text(e.students),t(".wpuf_category_select_353_352 option:nth-of-type(4)").text(e.graduate),t("select.wpuf__352 option:first-of-type").text(e.numbersOfPartners),t("select.wpuf__352 option:nth-of-type(2)").text(e.single),t("select.wpuf__352 option:nth-of-type(3)").text(e.multiple),t("select.wpuf_nomination_352 option:first-of-type").text(e.nomination),t("select.wpuf_nomination_352 option:nth-of-type(2)").text(e.interior),t("select.wpuf_nomination_352 option:nth-of-type(3)").text(e.pavilon),t("select.wpuf_nomination_352 option:nth-of-type(4)").text(e.busStation),t("select.wpuf_nomination_352 option:nth-of-type(5)").text(e.cityOnTheWater);var n=t(".wpuf-form-add");t("#year").attr("placeholder",o.Year),n.find("#post_title").attr("placeholder",o.name),n.find("#city").attr("placeholder",o.city),n.find("#phone_number").attr("placeholder",o.phoneNumber),n.find("#univer").attr("placeholder",o.univer),n.find("#spec").attr("placeholder",o.spec),n.find("#team_lead").attr("placeholder",o.teamLead),n.find("#project_name").attr("placeholder",o.projectName),n.find("#project_desc").attr("placeholder",o.projectDesc),n.find('input[type="submit"]').val(o.submit),t("#registrationModal").find('input[type="submit"]').first().val("Join"),console.log(t("#registrationModal").find('input[type="submit"]').first().val())}})}(jQuery),function(t){t(document).ready(function(){new e(t("#dateLineContainer")).init()});var e=function(e){this.container=e,this.line=e.find(".date_line"),this.dateStart=Date.parse(e.attr("data-datestart")),this.dateEnd=Date.parse(e.attr("data-dateend")),this.currentDate=Date.now(),this.mobileParentHeight=276,this.mobileLine=t(".date_line_mobile"),this.mobileWidth="767"};e.prototype.init=function(){return this.isMobile()?(this.setMobileHeight(),!0):(this.setWidth(),!0)},e.prototype.getDateDelta=function(){var t=this.dateStart,e=this.dateEnd,o=this.currentDate,n=e-t,i=o-t,r=100*i/n;return console.log(r),r},e.prototype.isMobile=function(){return t(window).width()<this.mobileWidth},e.prototype.setWidth=function(){var t=this.calculateWidth();this.line.css("width",t)},e.prototype.calculateWidth=function(){return this.getDateDelta()+"%"},e.prototype.setMobileHeight=function(){var t=this.calculateMobileHeight();console.log(t),this.mobileLine.css("height",t)},e.prototype.calculateMobileHeight=function(){var t=this.getDateDelta(),e=this.mobileParentHeight;return Math.floor(e*(t/100))+"px"}}(jQuery),function(t){t(document).ready(function(){var e=t(".filter_field"),o=t(".gallery_list");e.click(function(e){e.preventDefault();var n=t(this).attr("data-filter"),i=t(this).attr("data-terms"),r={action:"myfilter",filter_nomination_query:n,terms:i};t.ajax({url:window.wp_data.ajax_url,data:r,type:"POST",beforeSend:function(t){o.find(".sort_preloader").show()},success:function(t){o.find(".sort_preloader").hide(),o.html(t)}})})})}(jQuery),function(t){t(document).ready(function(){var e=t("#topHelper"),o=e.find(".helper_close");t("#helperToggle").on("click",function(t){e.slideToggle("fast"),t.preventDefault()}),o.on("click",function(t){e.slideToggle("fast"),t.preventDefault()})})}(jQuery),function(t){t(document).ready(function(){function e(e){var n=e.attr("href"),i=t(n),r=o(i);t("body").animate({scrollTop:r},800),t("#mainNav").slideToggle()}function o(t){var e=t.offset().top-325;return console.log(e),e}!function(){var o=t(".scroll_link");o.on("click",function(t){t.preventDefault(),e(o)})}()})}(jQuery),function(t){function e(t,e){return"error"==e?'<div class="alert alert-error"><p class="black">'+t+"</p></div>":'<div class="alert alert-success"><p class="black">'+t+"</p></div>"}var o=!1;t(document).ready(function(){function n(t,e,n){if(o)return e.find("response").html("<p>Необходимо дождаться ответа предыдущего запроса</p>"),!1;e.find('input[type="submit"]').attr("disabled","disabled").val("Подождите"),e.find(".response").html(""),o=!0}function i(n,i,r,a){if(console.log(arguments),n.success){var s=t("#stepSuccess");if(null!=(s=t(s.val())))t("#registrationModal").modal("hide"),s.modal("show");else{var c=e(n.data.message,"success");a.find('input[type="submit"]').prop("disabled",!1).val("Готово")}}else{var c=e(n.data.message,"error");a.find('input[type="submit"]').prop("disabled",!1).val("Отправить")}a.find(".response").html(c),n.data.redirect&&(window.location.href=n.data.redirect),o=!1}var r=t(".userform"),a={dataType:"json",beforeSubmit:n,success:i,error:function(t){console.log(arguments)},url:ajax_var.url};r.ajaxForm(a),t(".logout").click(function(e){if(e.preventDefault(),o)return!1;var n=t(this);t.ajax({type:"POST",url:"admin-ajax.php",dataType:"json",data:"action=logout_me&nonce="+t(this).data("nonce"),beforeSend:function(t){n.text("Подождите"),o=!0},success:function(t){t.success?(n.text("Выходим"),window.location.reload(!0)):alert(t.data.message)},error:function(t,e,o){console.log(arguments)},complete:function(t){o=!1}})})})}(jQuery),function(t){t(document).ready(function(){t("#successSendProject");t(".wpuf-form-add").submit(function(t){var e=window.sessionStorage;e&&e.setItem("project-publish-status","create")}),console.log("status:"+window.sessionStorage.getItem("project-publish-status"))})}(jQuery),function(t){function e(t,e){e.on("click",function(){t.slideToggle()}),t.find(".nav_close").on("click",function(e){t.slideToggle(),e.preventDefault()})}t(document).ready(function(){e(t("#mainNav"),t("#navToggle"))})}(jQuery),function(t){function e(){var e=t("#pagePreloader");e.find(".spinner").fadeOut(),e.delay(350).fadeOut("slow")}t(window).on("load",function(){e()})}(jQuery),function(t){t(document).ready(function(){function e(){o.scrollTop()>400?n.show("fast"):n.hide("fast")}var o=t("body"),n=t(".top_link");n.on("click",function(t){t.preventDefault(),o.animate({scrollTop:0},800)}),window.onscroll=function(){e()}})}(jQuery),function(t){t(document).ready(function(){var e=t(".sort_field"),o=t(".gallery_list");e.click(function(e){e.preventDefault();var n=t(this).attr("data-sort"),i=t(this).attr("data-terms"),r={action:"myfilter",sort_type:n,terms:i};t.ajax({url:window.wp_data.ajax_url,data:r,type:"POST",beforeSend:function(t){o.find(".sort_preloader").show()},success:function(t){o.find(".sort_preloader").hide(),o.html(t)}})})})}(jQuery),function(t){t(document).ready(function(){var o=t("#subscribleHelper");if(document.cookie){e.getCookie("user_is_visited")||(e.setCookie("user_is_visited","true",{expires:604800}),o.show())}else o.show();t("#subscribleCloseButton").click(function(t){t.preventDefault(),o.slideToggle("fast")})});var e={setCookie:function(t,e,o){o=o||{};var n=o.expires;if("number"==typeof n&&n){var i=new Date;i.setTime(i.getTime()+1e3*n),n=o.expires=i}n&&n.toUTCString&&(o.expires=n.toUTCString()),e=encodeURIComponent(e);var r=t+"="+e;for(var a in o){r+="; "+a;var s=o[a];!0!==s&&(r+="="+s)}console.log(o.expires),document.cookie=r},getCookie:function(t){var e=document.cookie.match(new RegExp("(?:^|; )"+t.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g,"\\$1")+"=([^;]*)"));return e?decodeURIComponent(e[1]):void 0},deleteCookie:function(t){this.setCookie(t,"",{expires:-1})}}}(jQuery),function(t){t(document).ready(function(){t('[data-toggle="tooltip"]').tooltip()})}(jQuery),function(t){t(document).ready(function(){t("#updateUserInfo").submit(function(e){e.preventDefault();var o=t("#userId").val(),n=t("#userUrl").val(),i=t("#userName").val(),r=t("#formAction").val(),a=t("#currentLang").val(),s={action:r,user_id:o,user_url:n,user_name:i,current_lang:a};t.post(ajax_var,s,function(e){var o=t("#userMessages");o.text(e),o.slideToggle()})})})}(jQuery),function(t){t(document).ready(function(){function e(t){yaCounter44245474.reachGoal(t,function(){console.log("Send event data to "+t)})}t("#topActionForUnloggined").on("click",function(t){e("topHelperHereButton")}),t(".reg_form").find("form").submit(function(){e("registrationForm")}),t("#buttonLearnMore").click(function(){e("buttonLearnMore")}),t("#buttonRegistrationOnButtom").click(function(){e("bottomRegistration")}),t(".wpcf7-form").click(function(){e("bottomContactForm")}),t("#buttonHouse").click(function(){e("buttonHouse")}),t("#ButtonCityOntheWater").click(function(){e("cityOnTheWaterNomination")}),t("#buttonAppartaments").click(function(){e("buttonApartamentsNomination")}),t("#buttonBusStation").click(function(){e("buttonBusStationNomination")})})}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
